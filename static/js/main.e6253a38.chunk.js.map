{"version":3,"sources":["util.tsx","store/pins/selectors.ts","Month.tsx","config.js","store/pins/actions.ts","App.tsx","store/pins/reducers.ts","store/index.ts","index.tsx"],"names":["months","List","of","selectPinsByMonth","state","props","pins","get","month","resizeImage","originalHeight","originalWidth","isHorizontal","ratio","Math","min","height","width","top","floor","random","left","position","Loading","Segment","inverted","Dimmer","active","Loader","connect","ownProps","id","key","style","margin","placeholder","padding","TransitionGroup","map","pin","CSSTransition","in","timeout","classNames","href","link","image","original","src","url","alt","note","firebase","apiKey","authDomain","databaseURL","databaseRef","ref","addPin","createAsyncAction","createAction","dispatchProps","useEffect","forEach","child","once","snapshot","childSnapshot","value","val","className","createReducer","Map","handleAction","action","update","payload","concat","pinsReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6253a38.chunk.js","sourcesContent":["import { List } from \"immutable\";\n\nexport const months = List.of(\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\"\n);\n","import { PinState } from \"./reducers\";\n\nexport const selectPins = (state: PinState) => state.pins;\n\n// This needs to be here so that the page can be memoized as much as possible.\n// I'll only want the month(s) that are being shown to update with the data,\n// not the whole page.\nexport const selectPinsByMonth = (state: PinState, props: { month: string }) =>\n    state.pins.get(props.month);\n","import React, { FunctionComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { PinState } from \"./store/pins/reducers\";\nimport { selectPinsByMonth } from \"./store/pins/selectors\";\nimport { Dimmer, Loader, Segment } from \"semantic-ui-react\";\nimport { Pin } from \"./types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport LazyLoad from \"react-lazyload\";\n\nconst containerWidth = 1000;\nconst containerHeight = 1000;\n\ntype OwnProps = {\n    month: string;\n};\n\nconst mapStateToProps = (state: PinState, ownProps: OwnProps) => ({\n    pins: selectPinsByMonth(state, { month: ownProps.month })\n});\n\ntype Props = ReturnType<typeof mapStateToProps> & OwnProps;\n\nconst resizeImage = (originalHeight: number, originalWidth: number) => {\n    const isHorizontal = originalHeight <= originalWidth;\n    var ratio = Math.min(300 / originalWidth, 300 / originalHeight);\n    return isHorizontal\n        ? {\n              height: \"auto\",\n              width: \"300px\",\n              top: `${Math.floor(\n                  Math.random() * (containerHeight - originalHeight * ratio)\n              )}px`,\n              left: `${Math.floor(Math.random() * (containerWidth - 300))}px`,\n              position: \"absolute\" as \"absolute\"\n          }\n        : {\n              height: \"300px\",\n              width: \"auto\",\n              top: `${Math.floor(Math.random() * (containerHeight - 300))}px`,\n              left: `${Math.floor(\n                  Math.random() * (containerWidth - originalWidth * ratio)\n              )}px`,\n              position: \"absolute\" as \"absolute\"\n          };\n};\n\nconst Loading: FunctionComponent = () => (\n    <Segment inverted>\n        <Dimmer active inverted>\n            <Loader />\n        </Dimmer>\n    </Segment>\n);\n\nconst Month: FunctionComponent<Props> = ({ month, pins }) => {\n    return (\n        <div\n            id={month}\n            key={month}\n            style={{\n                height: \"1400px\",\n                width: `${containerWidth}px`,\n                margin: \"0 auto\"\n            }}\n        >\n            <h1>{month}</h1>\n            <LazyLoad key={month} placeholder={<Loading />}>\n                <div\n                    style={{\n                        position: \"relative\",\n                        height: `${containerHeight}px`,\n                        width: \"100%\",\n                        padding: \"0 150px 0 0\"\n                    }}\n                >\n                    <TransitionGroup>\n                        {pins &&\n                            pins.map((pin: Pin) => (\n                                <CSSTransition\n                                    in={true}\n                                    timeout={5000}\n                                    classNames={\"fade\"}\n                                    key={pin.id}\n                                >\n                                    <a href={pin.link}>\n                                        <img\n                                            style={resizeImage(\n                                                pin.image.original.height,\n                                                pin.image.original.width\n                                            )}\n                                            src={pin.image.original.url}\n                                            alt={pin.note}\n                                        />\n                                    </a>\n                                </CSSTransition>\n                            ))}\n                    </TransitionGroup>\n                </div>\n            </LazyLoad>\n        </div>\n    );\n};\n\nexport default connect(mapStateToProps)(Month);\n","import * as firebase from \"firebase\";\nimport \"firebase/database\";\nconst config = {\n    apiKey: \"AIzaSyApInr1zGt3FpXYWjJRMgwNhoSdX9sGYyE\",\n    authDomain: \"bujo-2019.firebaseapp.com\",\n    databaseURL: \"https://bujo-2019.firebaseio.com\"\n};\nfirebase.initializeApp(config);\nconst databaseRef = firebase.database().ref();\nexport default databaseRef;\n","import { createAsyncAction, createAction } from \"typesafe-actions\";\nimport { Pin } from \"../../types\";\n\ntype PinData = {\n    month: string;\n    pins: Array<Pin>;\n};\n\nexport const fetchPinsAsync = createAsyncAction(\n    \"FETCH_DATA_REQUEST\",\n    \"FETCH_DATA_SUCCESS\",\n    \"FETCH_DATA_FAILURE\",\n    \"FETCH_DATA_CANCEL\"\n)<string, PinData, string, string>();\n\nexport const addPin = createAction(\"ADD_PIN\")<{ month: string; pin: Pin }>();\n","import React, { FunctionComponent, useEffect } from \"react\";\nimport \"./App.css\";\nimport { months } from \"./util\";\nimport Month from \"./Month\";\nimport databaseRef from \"./config\";\nimport { Pin } from \"./types\";\nimport { addPin } from \"./store/pins/actions\";\nimport { connect } from \"react-redux\";\n\nconst dispatchProps = {\n    addPin: addPin\n};\n\ntype Props = typeof dispatchProps;\n\nconst App: FunctionComponent<Props> = props => {\n    useEffect(() => {\n        months.forEach((month: string) => {\n            const monthRef = databaseRef.child(month + \"/\");\n\n            // Getting data from database\n            monthRef.once(\"value\", snapshot => {\n                snapshot.forEach(childSnapshot => {\n                    var value = childSnapshot.val() as Pin;\n                    props.addPin({ month, pin: value });\n                });\n            });\n        });\n    });\n\n    return (\n        <div className=\"App\">\n            {months.map((month: string) => (\n                <Month key={month} month={month} />\n            ))}\n        </div>\n    );\n};\n\nexport default connect(null, dispatchProps)(App);\n","import { createReducer } from \"typesafe-actions\";\nimport { addPin } from \"./actions\";\nimport { combineReducers } from \"redux\";\nimport { Pin } from \"../../types\";\nimport { Map, List } from \"immutable\";\n\nexport const pins = createReducer(Map<string, List<Pin>>()).handleAction(\n    addPin,\n    (state, action) =>\n        state.update(action.payload.month, (value = List()) =>\n            value.concat(action.payload.pin)\n        )\n);\n\nconst pinsReducer = combineReducers({\n    pins\n});\n\nexport default pinsReducer;\nexport type PinState = ReturnType<typeof pinsReducer>;\n","import { createStore } from \"redux\";\nimport pinsReducer from \"./pins/reducers\";\n\nconst store = createStore(pinsReducer);\n\nexport default store;\n","import \"semantic-ui-css/semantic.min.css\";\nimport React, { FunctionComponent } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nconst Root: FunctionComponent = () => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n"],"sourceRoot":""}